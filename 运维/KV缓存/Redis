一： redis-cluster设计
redis-cluster采用无中心结构，每个节点保存数据和整个集群状态，没个节点都喝其他所有节点连接

特点如下：
    1、所有redis节点彼此互联（PING-PONG机制），内存使用二进制协议优化传输速度和带宽。
    2、节点的fail是通过集群中超过半数的节点检测失效时才生效。
    3、客户端与redis节点直连，不需要中间proxy层， 客户端不需要连接集群所有节点，其中之一即可。
    4、redis-cluster 把所有的物理节点映射到[0-16383]slot上，不一定平均分配，cluster负责维护node-slot-value
    5、redis-cluster预分好16384个桶，当需要再redis集群中防止一个key-value时， 根据哈希槽算法分配key到桶中。


1、Redis cluster节点分配：
Tcp Port
    每个Redis Cluster中的节点需要建立两个TCP 连接，一个端口用于服务客户端（Command port），例如6379；另一个端口是数据端口（Cluster bus port），在前一个端口上加10000，如16379，该端口主要用于集群总线，这是一个用binary协议进行集群节点间通讯的通道。集群总线用于节点的故障决策，配置更新，故障转移，数据交互等等。客户端不要尝试去和集群总线的端口进行通讯，并且保证这两个端口在防火墙中是开启状态，否则Reis 集群不能正常的工作。Command port 和Cluser bus port总是相差10000。
Redis集群数据分区
    Redis Cluster没用用一致性哈希算法，而是一种不同的分区形式，每一个Key概念上都属于我们称为hash slot(hash槽)的一部分。在Redis Cluster中有16384个hash slot，通过key的CRC16的值取模16384来计算每个key所属的hash slot。

在Redis Cluster中每个节点负责hash槽的部分子集，比如下面一个集群节点的hash slots分布：
    NodeA 包含 0 - 5000的hash slots.
    NodeB 包含 5001 - 10000的hash slots.
    NodeC 包含 10001 - 16383的hash slots

    新增节点，则从没个Node中平均取组成。

2、Redis cluster主从模式
    为了实现Redis集群当少数master节点出现故障或者无法与多数节点通讯时依旧能够正常提供服务，Redis集群用了master/slave模式，这样每个hash slot都有1（master节点本身）到N个冗余（N-1为slave节点的个数）

3、Redis集群一致性保证
    无法提供强一致性，主从同步在异步模式下（不回返回确认ok），可能丢失数据；

4、Redis集群的配置参数：
    cluster-enable <yes/no>             Cluster模式、普通模式
    cluster-confile-file <filename>     记录当前节点以及整个集群节点等信息（配置文件指定， 程序自动创建）
    cluster-node-timeout <毫秒数>        node在被认为失效之前，允许不可用的最长时间。如果Master处于“不可达”的时间超过此值，将会被failover
    cluster-migration-barrier <count>   master需要保留的slaves的最少个数；
    cluster-require-full-coverage <yes/no>    “集群是否需要全量覆盖”，如果设置为yes（默认值），当集群中有slots没有被任何node覆盖（通常是由于某个master失效，但是它也没有slave接管时），集群将会终止接收writes请求；如果设置为no，集群中那些服务正常的nodes（slots）仍然可以继续服务。
    cluster-slave-validity-factor <factor>    用于限定slave于master的失联时长的倍数；如果设置为0，slave总是尝试failover，不管master与slave之间的链接断开多久（即只要slave无法与master通讯，都会尝试进行failover；Cluster有选举机制，有可能会被否决）；如果此值为正值，则失联的最大时长为：factor * node timeout，当失联时长超过此值后，slave触发failover。比如node timeout为5秒，factor为10，那么当slave与master失联超过50秒时，slave将会尽力尝试failover。此值需要合理设置，也会对集群有效性、数据一致性产生影响。


二： redis 主从复制
1、redis 主从的复制过程原理
    a、当从库跟主库建立master-slave关系后，接收到发送的slaveof命令，会向主数据库发送SYNC命令；
    b、主库接收到SYNC命令后 会开始再在后台执行BGSAVE保存快照（RDB持久化过程），并将期间接收到写命令缓存起来。
    c、当快照完成后，主Redis会将快照文件和所有缓存的命令发送给slave。
    d、Slave接收到后，会载入快照文件并且执行收到的缓存的命令。
    e、之后，Master每当接收到命令时，就会将命令发送给Redis，从而保持数据的一致。

2、Sentinel 监控
    a、监控主从Redis运行是否正常；
    b、Master出现故障后，自动将Slave 提升为Master；

3、Sentinel 原理
①sentinel集群通过给定的配置文件发现master，启动时会监控master。通过向master发送info信息获得该服务器下面的所有从服务器。
②sentinel集群通过命令连接向被监视的主从服务器发送hello信息(每秒一次)，该信息包括sentinel本身的ip、端口、id等内容，以此来向其他sentinel宣告自己的存在。
③sentinel集群通过订阅连接接收其他sentinel发送的hello信息，以此来发现监视同一个主服务器的其他sentinel；集群之间会互相创建命令连接用于通信，因为已经有主从服务器作为发送和接收hello信息的中介，sentinel之间不会创建订阅连接。
④sentinel集群使用ping命令来检测实例的状态，如果在指定的时间内（down-after-milliseconds）没有回复或则返回错误的回复，那么该实例被判为下线。
⑤当failover主备切换被触发后，failover并不会马上进行，还需要sentinel中的大多数sentinel授权后才可以进行failover，即进行failover的sentinel会去获得指定quorum个的sentinel的授权，成功后进入ODOWN状态。如在5个sentinel中配置了2个quorum，等到2个sentinel认为master死了就执行failover。
⑥sentinel向选为master的slave发送SLAVEOF NO ONE命令，选择slave的条件是sentinel首先会根据slaves的优先级来进行排序，优先级越小排名越靠前。如果优先级相同，则查看复制的下标，哪个从master接收的复制数据多，哪个就靠前。如果优先级和下标都相同，就选择进程ID较小的。
⑦sentinel被授权后，它将会获得宕掉的master的一份最新配置版本号(config-epoch)，当failover执行结束以后，这个版本号将会被用于最新的配置，通过广播形式通知其它sentinel，其它的sentinel则更新对应master的配置。

①到③是自动发现机制:

以10秒一次的频率，向被监视的master发送info命令，根据回复获取master当前信息。
以1秒一次的频率，向所有redis服务器、包含sentinel在内发送PING命令，通过回复判断服务器是否在线。
以2秒一次的频率，通过向所有被监视的master，slave服务器发送当前sentinel，master信息的消息。
④是检测机制，⑤和⑥是failover机制，⑦是更新配置机制。

注意：因为redis采用的是异步复制，没有办法避免数据的丢失。但可以通过以下配置来使得数据不会丢失：min-slaves-to-write 1 、 min-slaves-max-lag 10。一个redis无论是master还是slave，都必须在配置中指定一个slave优先级。要注意到master也是有可能通过failover变成slave的。如果一个redis的slave优先级配置为0，那么它将永远不会被选为master，但是它依然会从master哪里复制数据。


三： Redis持久化机制
1、RDB与AOF区别
    RDB持久化是指在指定的时间间隔内将内存中的数据集快找到磁盘，实际操作是fork一个子进程，先将数据集写入临时文件，再替换之前的文件，用二进制压缩存储。
    AOF持久化是以日志的形式记录服务器所处理的每一个写、删除操作，查询操作不会记录，以文本的方式记录，可以打开文件看到详细的操作记录。

2、二者的优缺点
RDB存在哪些优势呢？
1). 一旦采用该方式，那么你的整个Redis数据库将只包含一个文件，这对于文件备份而言是非常完美的。比如，你可能打算每个小时归档一次最近24小时的数 据，同时还要每天归档一次最近30天的数据。通过这样的备份策略，一旦系统出现灾难性故障，我们可以非常容易的进行恢复。
2). 对于灾难恢复而言，RDB是非常不错的选择。因为我们可以非常轻松的将一个单独的文件压缩后再转移到其它存储介质上。
3). 性能最大化。对于Redis的服务进程而言，在开始持久化时，它唯一需要做的只是fork出子进程，之后再由子进程完成这些持久化的工作，这样就可以极大的避免服务进程执行IO操作了。
4). 相比于AOF机制，如果数据集很大，RDB的启动效率会更高。

RDB又存在哪些劣势呢？
1). 如果你想保证数据的高可用性，即最大限度的避免数据丢失，那么RDB将不是一个很好的选择。因为系统一旦在定时持久化之前出现宕机现象，此前没有来得及写入磁盘的数据都将丢失。
2). 由于RDB是通过fork子进程来协助完成数据持久化工作的，因此，如果当数据集较大时，可能会导致整个服务器停止服务几百毫秒，甚至是1秒钟。

AOF的优势有哪些呢？
1). 该机制可以带来更高的数据安全性，即数据持久性。Redis中提供了3中同步策略，即每秒同步、每修改同步和不同步。事实上，每秒同步也是异步完成的，其 效率也是非常高的，所差的是一旦系统出现宕机现象，那么这一秒钟之内修改的数据将会丢失。而每修改同步，我们可以将其视为同步持久化，即每次发生的数据变 化都会被立即记录到磁盘中。可以预见，这种方式在效率上是最低的。至于无同步，无需多言，我想大家都能正确的理解它。
2). 由于该机制对日志文件的写入操作采用的是append模式，因此在写入过程中即使出现宕机现象，也不会破坏日志文件中已经存在的内容。然而如果我们本次操 作只是写入了一半数据就出现了系统崩溃问题，不用担心，在Redis下一次启动之前，我们可以通过redis-check-aof工具来帮助我们解决数据 一致性的问题。
3). 如果日志过大，Redis可以自动启用rewrite机制。即Redis以append模式不断的将修改数据写入到老的磁盘文件中，同时Redis还会创 建一个新的文件用于记录此期间有哪些修改命令被执行。因此在进行rewrite切换时可以更好的保证数据安全性。
4). AOF包含一个格式清晰、易于理解的日志文件用于记录所有的修改操作。事实上，我们也可以通过该文件完成数据的重建。

AOF的劣势有哪些呢？
1). 对于相同数量的数据集而言，AOF文件通常要大于RDB文件。RDB 在恢复大数据集时的速度比 AOF 的恢复速度要快。
2). 根据同步策略的不同，AOF在运行效率上往往会慢于RDB。总之，每秒同步策略的效率是比较高的，同步禁用策略的效率和RDB一样高效。
二者选择的标准，就是看系统是愿意牺牲一些性能，换取更高的缓存一致性（aof），还是愿意写操作频繁的时候，不启用备份来换取更高的性能，待手动运行save的时候，再做备份（rdb）。rdb这个就更有些 eventually consistent的意思了。

3、常用配置
RDB持久化配置
Redis会将数据集的快照dump到dump.rdb文件中。此外，我们也可以通过配置文件来修改Redis服务器dump快照的频率，在打开6379.conf文件之后，我们搜索save，可以看到下面的配置信息：

save 900 1             #在900秒(15分钟)之后，如果至少有1个key发生变化，则dump内存快照。
save 300 10            #在300秒(5分钟)之后，如果至少有10个key发生变化，则dump内存快照。
save 60 10000          #在60秒(1分钟)之后，如果至少有10000个key发生变化，则dump内存快照。

AOF持久化配置
在Redis的配置文件中存在三种同步方式，它们分别是：

appendfsync always     #每次有数据修改发生时都会写入AOF文件。
appendfsync everysec   #每秒钟同步一次，该策略为AOF的缺省策略。
appendfsync no         #从不同步。高效但是数据不会被持久化。